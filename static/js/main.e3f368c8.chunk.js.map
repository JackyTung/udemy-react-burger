{"version":3,"sources":["i18n.js","components/NotFound/index.js","containers/Console/index.js","App.js","serviceWorker.js","styles/display.js","styles/flex.js","styles/position.js","styles/sizing.js","styles/text.js","index.js","styles/index.js"],"names":["i18n","use","detector","backend","initReactI18next","init","fallbackLng","load","whitelist","interpolation","escapeValue","format","value","moment","loadPath","react","useSuspense","initImmediate","NotFound","AsyncOrder","Loadable","loader","loading","ConsoleIndex","url","useRouteMatch","basename","process","exact","path","render","to","component","history","createBrowserHistory","Boolean","window","location","hostname","match","display","flexDirection","justifyContent","alignItems","alignSelf","flexWrap","flexShrink","position","width","height","minWidth","minHeight","maxWidth","maxHeight","textAlign","overflow","whiteSpace","textOverflow","fontWeight","jss","setup","preset","createStyleSheet","html","body","fontFamily","margin","padding","a","textDecoration","color","button","outline","border","flex","sizing","text","meta","attach","CssBaseline","Console","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3f368c8.chunk.js","sourcesContent":["import { initReactI18next } from 'react-i18next';\n\nimport i18n from 'i18next';\nimport detector from 'i18next-browser-languagedetector';\nimport backend from 'i18next-xhr-backend';\nimport moment from 'moment';\n\ni18n\n  .use(detector)\n  .use(backend)\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    fallbackLng: 'en-US',\n    load: 'currentOnly',\n    whitelist: ['en-US', 'zh-TW'],\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n      format: (value, format) => {\n        if (value instanceof moment) {\n          return value.format(format);\n        }\n        return value;\n      },\n    },\n    backend: {\n      loadPath: '/locales/{{lng}}/{{ns}}.json',\n    },\n    react: {\n      useSuspense: false,\n    },\n    initImmediate: false,\n  });\n\nexport default i18n;\n","import React from 'react';\n\nconst NotFound = () => {\n  return <div>This is NotFound page</div>;\n};\n\nexport default NotFound;\n","import React from 'react';\nimport Loadable from 'react-loadable';\nimport { BrowserRouter, Redirect, Route, Switch, useRouteMatch } from 'react-router-dom';\n\nimport NotFound from '@/components/NotFound';\n\nconst AsyncOrder = new Loadable({\n  loader: () => import(/* webpackChunkName: \"order\" */ './Order'),\n  loading: () => [],\n});\n\nconst ConsoleIndex = () => {\n  const { url } = useRouteMatch();\n\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        {<Route exact path={url} render={() => <Redirect to={'/console/order'} />} />}\n        <Route path={`${url}/order`} component={AsyncOrder} />\n        {<Route component={NotFound} />}\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default ConsoleIndex;\n","import React from 'react';\nimport { Router } from 'react-router';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport { createBrowserHistory } from 'history';\n\nimport Console from './containers/Console';\n\nconst history = createBrowserHistory();\n\nexport default () => (\n  <Router history={history}>\n    <Switch>\n      <Route path=\"/console\" component={Console} />\n      <Redirect to=\"/console\" />\n    </Switch>\n  </Router>\n);\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default {\n  '.d-none': {\n    display: 'none',\n  },\n  '.d-inline': {\n    display: 'inline',\n  },\n  '.d-inline-block': {\n    display: 'inline-block',\n  },\n  '.d-block': {\n    display: 'block',\n  },\n  '.d-flex': {\n    display: 'flex',\n  },\n};\n","export default {\n  '.flex-row': {\n    flexDirection: 'row',\n  },\n  '.flex-row-rev': {\n    flexDirection: 'row-reverse',\n  },\n  '.flex-column': {\n    flexDirection: 'column',\n  },\n  '.flex-column-rev': {\n    flexDirection: 'column-reverse',\n  },\n  // justify-content\n  '.justify-start': {\n    justifyContent: 'flex-start',\n  },\n  '.justify-end': {\n    justifyContent: 'flex-end',\n  },\n  '.justify-center': {\n    justifyContent: 'center',\n  },\n  '.justify-space-between': {\n    justifyContent: 'space-between',\n  },\n  '.justify-space-around': {\n    justifyContent: 'space-around',\n  },\n  '.justify-space-evenly': {\n    justifyContent: 'space-evenly',\n  },\n  // align-items\n  '.align-start': {\n    alignItems: 'flex-start',\n  },\n  '.align-end': {\n    alignItems: 'flex-end',\n  },\n  '.align-center': {\n    alignItems: 'center',\n  },\n  '.align-stretch': {\n    alignItems: 'stretch',\n  },\n  '.align-baseline': {\n    alignItems: 'baseline',\n  },\n  // align-items\n  '.align-self-start': {\n    alignSelf: 'flex-start',\n  },\n  '.align-self-end': {\n    alignSelf: 'flex-end',\n  },\n  '.align-self-center': {\n    alignSelf: 'center',\n  },\n  '.align-self-stretch': {\n    alignSelf: 'stretch',\n  },\n  '.align-self-baseline': {\n    alignSelf: 'baseline',\n  },\n  // flex-wrap\n  '.flex-nowrap': {\n    flexWrap: 'nowrap',\n  },\n  '.flex-wrap': {\n    flexWrap: 'wrap',\n  },\n  '.flex-wrap-reverse': {\n    flexWrap: 'wrap-reverse',\n  },\n  '.flex-shrink-0': {\n    flexShrink: 0,\n  },\n};\n","export default {\n  '.position-static': {\n    position: 'static',\n  },\n  '.position-relative': {\n    position: 'relative',\n  },\n  '.position-absolute': {\n    position: 'absolute',\n  },\n  '.position-fixed': {\n    position: 'fixed',\n  },\n  '.position-sticky': {\n    position: 'sticky',\n  },\n};\n","export default {\n  '.w-100': {\n    width: '100%',\n  },\n  '.h-100': {\n    height: '100%',\n  },\n  '.vw-100': {\n    width: '100vw',\n  },\n  '.vh-100': {\n    height: '100vh',\n  },\n  '.min-vw-100': {\n    minWidth: '100vw',\n  },\n  '.min-vh-100': {\n    minHeight: '100vh',\n  },\n  '.max-vw-100': {\n    maxWidth: '100vw',\n  },\n  '.max-vh-100': {\n    maxHeight: '100vh',\n  },\n};\n","export default {\n  '.text-center': {\n    textAlign: 'center',\n  },\n  '.text-truncate': {\n    overflow: 'hidden',\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis',\n  },\n  '.text-bold': {\n    fontWeight: 500,\n  },\n};\n","import './i18n';\n\nimport React from 'react';\nimport { render } from 'react-dom';\n\nimport jss from 'jss';\nimport preset from 'jss-preset-default';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport styles from './styles';\n\n// create global styles\njss.setup(preset());\njss.createStyleSheet(styles(), { meta: 'global' }).attach();\n\nrender(\n  <>\n    <CssBaseline />\n    <App />\n  </>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import display from './display';\nimport flex from './flex';\nimport position from './position';\nimport sizing from './sizing';\n//import spacing from './spacing';\nimport text from './text';\n\nexport default theme => ({\n  '@global': {\n    html: {\n      height: '100%',\n      overflow: 'hidden',\n    },\n    body: {\n      height: '100%',\n      fontFamily: 'Roboto, Noto Sans TC, sans-serif',\n      '-webkit-font-smoothing': 'antialiased',\n    },\n    '#root': {\n      height: '100%',\n    },\n    'h1, h2, h3, h4, h5, h6, p': {\n      margin: 0,\n      padding: 0,\n    },\n    a: {\n      display: 'inline-block',\n      textDecoration: 'none',\n      color: 'inherit',\n    },\n    button: {\n      outline: 'none',\n      border: 'none',\n    },\n    ...display,\n    ...flex,\n    ...position,\n    ...sizing,\n    ...text,\n    //...spacing(theme),\n  },\n});\n"],"sourceRoot":""}